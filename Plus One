/*    66. Plus One
Given a non-empty array of decimal digits representing a non-negative integer, increment one to the integer.

The digits are stored such that the most significant digit is at the head of the list, and each element in the array contains a single digit.

You may assume the integer does not contain any leading zero, except the number 0 itself.

 

Example 1:

Input: digits = [1,2,3]
Output: [1,2,4]
Explanation: The array represents the integer 123.
Example 2:

Input: digits = [4,3,2,1]
Output: [4,3,2,2]
Explanation: The array represents the integer 4321.      */



class Solution {
    public int[] plusOne(int[] digits) {
        int n = digits.length;
        boolean carriage = true; //Check if we need to increment the size of the array. This can happen if we are adding 1 to 9, so array becomes from [9] -> [1,0]
        
        for(int i = n - 1; i>=0; i--) {
            digits[i] = (digits[i] + 1) % 10; //Add one for the first element, and the next elements if we need to keep getting the carriage
            
            if(digits[i]%10 != 0) { //If the number is not zero, we can exit. This is because we do not need to add one anywhere else.
                carriage = false; //Do not need to increase the size of the array.
                break;
            }
            
        }
        
        if(carriage) { //Increase the size of the array
            int[] arr = new int[n+1]; //Array initialized to 0
            arr[0] = 1; //set first one to one.
            return arr;
        }
        else
            return digits;
    }
}
