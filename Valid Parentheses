/*  20. Valid Parentheses

Given a string s containing just the characters '(', ')', '{', '}', '[' and ']', determine if the input string is valid.

An input string is valid if:

Open brackets must be closed by the same type of brackets.
Open brackets must be closed in the correct order.
 

Example 1:

Input: s = "()"
Output: true
Example 2:

Input: s = "()[]{}"
Output: true
Example 3:

Input: s = "(]"
Output: false
Example 4:

Input: s = "([)]"
Output: false     */


class Solution {
    public boolean isValid(String s) {
        if (s.length() % 2 != 0)
            return false;
        Stack<String> t = new Stack<String>();
        for (int i = 0; i < s.length(); i++) {
            String temp = "" + s.charAt(i);
            t.push(temp);            
        }
        Stack<String> q = new Stack<String>();
        while (!t.isEmpty()) {
            String temp = t.pop();
            if (temp.equals(")") || temp.equals("]") || temp.equals("}")) {
                q.add(temp);
            }
            if (temp.equals("(") || temp.equals("[") || temp.equals("{")) {
                String temp2 = "";
                if(!q.isEmpty()) {
                     temp2 = "" + q.pop();
                } else {
                    return false;
                }
                if (temp.equals("(")) {
                    if (!temp2.equals(")"))
                        return false;
                }
                if (temp.equals("[")) {
                    if (!temp2.equals("]"))
                        return false;
                }
                if (temp.equals("{")) {
                    if (!temp2.equals("}"))
                        return false;
                }
            }
        }
        if (!q.isEmpty())
            return false;
        return true;
    }
}
