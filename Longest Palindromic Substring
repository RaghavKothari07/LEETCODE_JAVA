/*     5. Longest Palindromic Substring

Given a string s, return the longest palindromic substring in s.

 

Example 1:

Input: s = "babad"
Output: "bab"
Note: "aba" is also a valid answer.
Example 2:

Input: s = "cbbd"
Output: "bb"
Example 3:

Input: s = "a"
Output: "a"                         */



class Solution {
    public String longestPalindrome(String s) {
       int n = s.length();
        if(n == 1) return s;
        
        boolean dp[][] = new boolean[n][n]; 
		/*
		Marking all elements of same order diagonal as true
		as all (i,j) can only have a single character 
		and they are always a palindrome.
		*/
        for(int i=0;i<n;i++) 
            dp[i][i] = true;
        
        int start = 0,end = 0; //start and end index of result string
        
        for(int i=1; i<n; i++) {
            for(int j=0; j<i ;j++) {
                if(s.charAt(i) == s.charAt(j)) { // check if s[i] == s[j]
				/*
				If difference b/w i-j == 1 that means they don't have any characters between them so they must be palindrome
				else if there are characters b/w them that means we have to check if their inner string(characters) i.e (j+1,i-1) is palindrome or not
				by using our dp array and if it does then it is also a palindrome.
				*/
                    if(i-j == 1 || dp[j+1][i-1]) { 
                        dp[j][i] = true;
                        if(end-start < i-j) { // to store the indexes of biggest string
                            start = j;
                            end = i;
                        }
                    }
                }
                else dp[j][i] = false; 
            }
        }
        
        return s.substring(start,end+1);  
    }
}
