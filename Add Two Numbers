/*   2. Add Two Numbers

You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order, and each of their nodes contains a single digit. Add the two numbers and return the sum as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

 

Example 1:


Input: l1 = [2,4,3], l2 = [5,6,4]
Output: [7,0,8]
Explanation: 342 + 465 = 807.                */



/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public ListNode addTwoNumbers(ListNode l1, ListNode l2) {
        ListNode resultListHead, pointer;

        boolean oneToNextPosition = (l1.val + l2.val) > 9;
        int currentValue = oneToNextPosition ? (l1.val + l2.val) % 10 : l1.val + l2.val;

        pointer = new ListNode(currentValue);

        resultListHead = pointer;

        l1 = l1.next;
        l2 = l2.next;


        while (l1 != null || l2 != null) {

            int l1val = l1 == null ? 0 : l1.val;
            int l2val = l2 == null ? 0 : l2.val;

            if (oneToNextPosition) l1val++;

            oneToNextPosition = (l1val + l2val) > 9;

            currentValue = oneToNextPosition ? (l1val + l2val) % 10 : l1val + l2val;

            pointer.next = new ListNode(currentValue);

            pointer = pointer.next;

            l1 = l1 == null ? null : l1.next;
            l2 = l2 == null ? null : l2.next;

        }

        if (oneToNextPosition) pointer.next = new ListNode(1);


        return resultListHead;

    }
}
