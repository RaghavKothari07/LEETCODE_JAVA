/*      155. Min Stack
Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
 

Example 1:

Input
["MinStack","push","push","push","getMin","pop","top","getMin"]
[[],[-2],[0],[-3],[],[],[],[]]

Output
[null,null,null,null,-3,null,0,-2]

Explanation
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin(); // return -3
minStack.pop();
minStack.top();    // return 0
minStack.getMin(); // return -2                      */



class MinStack {

    /** initialize your data structure here. */
    Stack<Integer> stack;
    Stack<Integer> minStack;
    public MinStack() {
        this.stack = new Stack<Integer>();
        this.minStack = new Stack<Integer>();        
    }
    
    public void push(int x) {
        this.stack.push(x);
        if(this.minStack.isEmpty() || x<=this.minStack.peek()){
            this.minStack.push(x);
        }        
    }
    
    public void pop() {
        int poppedValue = this.stack.pop();
        if(poppedValue==this.minStack.peek()){
            this.minStack.pop();
        }        
    }
    
    public int top() {
        return this.stack.peek();        
    }
    
    public int getMin() {
        return this.minStack.peek();        
    }
}

