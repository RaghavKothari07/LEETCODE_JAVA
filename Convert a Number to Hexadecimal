/*    405. Convert a Number to Hexadecimal

Given an integer, write an algorithm to convert it to hexadecimal. For negative integer, twoâ€™s complement method is used.

Note:

All letters in hexadecimal (a-f) must be in lowercase.
The hexadecimal string must not contain extra leading 0s. If the number is zero, it is represented by a single zero character '0'; otherwise, the first character in the hexadecimal string will not be the zero character.
The given number is guaranteed to fit within the range of a 32-bit signed integer.
You must not use any method provided by the library which converts/formats the number to hex directly.
Example 1:

Input:
26

Output:
"1a"
Example 2:

Input:
-1

Output:
"ffffffff"                            */




class Solution {
    public String toHex(int num) {
      	long longNum = num >= 0 ? num : Integer.MAX_VALUE * 2L + 2 + num;
		StringBuffer value = new StringBuffer().append(getValue((int)(longNum % 16)));
		
		while(longNum >= 16) {
			longNum = longNum / 16;
			value.append(getValue((int)(longNum % 16)));
		}
		
		return value.reverse().toString();
    }

	String getValue(int number) {
		return number < 10 ? String.valueOf(number) : Character.toString('a' + number - 10);  
    }
}
