/*      111. Minimum Depth of Binary Tree

Given a binary tree, find its minimum depth.

The minimum depth is the number of nodes along the shortest path from the root node down to the nearest leaf node.

Note: A leaf is a node with no children.

 

Example 1:


Input: root = [3,9,20,null,null,15,7]
Output: 2                                */



/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode() {}
 *     TreeNode(int val) { this.val = val; }
 *     TreeNode(int val, TreeNode left, TreeNode right) {
 *         this.val = val;
 *         this.left = left;
 *         this.right = right;
 *     }
 * }
 */
class Solution {
    public int minDepth(TreeNode root) {
	//Base case
        if(root == null) return 0;
        
	//In case only one node is present
        if(root.left == null && root.right == null) {
            return 1;
        }
		
		// if no left subtree exists, calculate the minimum depth for the right subtree
        if(root.left == null) {
            return 1 + minDepth(root.right);
        }
		// if no right subtree exists, calculate the minimum depth for the left subtree
        if(root.right == null) {
            return 1 + minDepth(root.left);
        }
		
		//find minimum of the left and right height
        return 1 + Math.min(minDepth(root.left), minDepth(root.right));
    }
}
